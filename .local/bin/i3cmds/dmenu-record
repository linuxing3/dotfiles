#!/bin/sh

# Usage:
# `record`: Ask for recording type via dmenu
# `record screencast`: Record both audio and screen
# `record video`: Record only screen
# `record audio`: Record only audio
# `record kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.
[ -f $HOME/.dmenurc ] && . $HOME/.dmenurc

updateicon() { \
	echo "$1" > /tmp/recordingicon
	pkill -RTMIN+9 i3blocks
	}

killrecording() {
	recpid="$(cat /tmp/recordingpid)"
	# kill with SIGTERM, allowing finishing touches.
	kill -15 "$recpid"
	rm -f /tmp/recordingpid
	# # updateicon ""
	# pkill -RTMIN+9 i3blocks
	# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	sleep 3
	kill -9 "$recpid"
	exit
	}

screencast_cpu() { \
	ffmpeg -y \
	-f x11grab \
	-framerate 60 \
	-s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
	-i $DISPLAY \
	-f alsa -i default \
 	-c:v libx264rgb -crf 18 -preset ultrafast -tune zerolatency \
        -c:a flac \
	"$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
	# updateicon "‚è∫Ô∏èüéôÔ∏è"
       	}

screencast_kms() {
    ffmpeg -device /dev/dri/card0 \
           -f kmsgrab \
           -i - \
           -vf 'hwmap=derive_device=vaapi,scale_vaapi=w=1920:h=1080:format=nv12' -c:v h264_vaapi -qp 24\
           output.mp4
}

screencast_vaapi() {
ffmpeg -vaapi_device /dev/dri/renderD128 \
           -f alsa -i default -c:a flac \
           -f x11grab \
           -framerate 30 \
           -video_size 1920x1200 \
           -i $DISPLAY+0,0 \
           -vf 'hwupload,scale_vaapi=format=nv12' -c:v h264_vaapi -qp 24 \
           "$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mp4" &
    echo $! > /tmp/recordingpid
           # -video_size $(xdpyinfo | grep dimensions | awk '{print $2;}') \
}

video() { ffmpeg \
	-f x11grab \
	-s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
	-i $DISPLAY \
 	-c:v libx264 -qp 0 -r 30 \
	"$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
	# updateicon "‚è∫Ô∏è"
	}

webcamhidef() { ffmpeg \
	-f v4l2 \
	-i /dev/video0 \
	-video_size 1920x1080 \
	"$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
	# updateicon "üé•"
	}

webcam() { ffmpeg \
	-f v4l2 \
	-i /dev/video0 \
	-video_size 640x480 \
	"$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
	# updateicon "üé•"
	}


audio() { \
	ffmpeg \
	-f alsa -i default \
	-c:a flac \
	"$HOME/audio-$(date '+%y%m%d-%H%M-%S').flac" &
	echo $! > /tmp/recordingpid
	# updateicon "üéôÔ∏è"
	}

ask_screencast_type() { \
    choice=$(printf "vaapi\\ncpu\\nkms" | dmenu $DMENU_OPTIONS -i -p "Screencast encoder:")
    case "$choice" in
        vaapi) screencast_vaapi;;
        cpu)   screencast_cpu;;
        kms)   screencast_kms;;
        *)     askrecording;;
    esac
}

askrecording() { \
	choice=$(printf "screencast\\nvideo\\naudio\\nwebcam\\nwebcam (hi-def)\\nkill" | dmenu $DMENU_OPTIONS -i -p "Select recording style:")
	case "$choice" in
		screencast) ask_screencast_type;;
		audio) audio;;
		video) video;;
		webcam) webcam;;
		"webcam (hi-def)") webcamhidef;;
                kill) killrecording;;
                
	esac
}

asktoend() { \
	response=$(printf "No\\nYes" | dmenu $DMENU_OPTIONS -i -p "Recording still active. End recording?") &&
	[ "$response" = "Yes" ] &&  killrecording

	}


case "$1" in
	screencast) screencast_cpu;;
	audio) audio;;
	video) video;;
	kill) killrecording;;
	*) ([ -f /tmp/recordingpid ] && killrecording && exit 0) || askrecording;;
	# *) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording;;
esac
